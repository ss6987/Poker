@startuml
title ポーカー(クラス図)

+class CardType{
    -int number;
    -int mark;
    +int getNumber()
    +int getMark()
    +String getMarkString()
}

+class HandType{
    -CardType[5] hand
    +CardType getHand(int number)
    +void changeHandCard(DeckType deck,int[] request)
}

+class DeckType{
    -CardType[] cardArray
    -int address
    +CardType drawCard()
}

+class PlayerType{
    -HandCard hand
    -HandRankingType judgeResult
    +void drawHand(DeckType deck,int[] Request)
    +void judgeHand()
    +HandType getHand()
    +HandRankingType getJudgeResult()
}


+class PokerServer{
    -static DeckType deck
    -static ArrayList<PlayerType> player
    +static void main(String[] args)
    -static void createPlayer()
    -static void changeCard()
}

+class PokerClient{
    -PlayerType player
    -CommunicationSet connect
    -int playerId
    -int playerSize
    -String address
    +void gameStart(boolean addFlag)
    +void loadHand()
    +void sendRequest()
    +PlayerType[] showResult()
    +void connectServer(int connectNumber)
    +void setAddress(String address)
    +getPlayerId()
    +getPlayerHand()
}

+Class CommunicationSet{
    -Socket socket
    -ObjectOutputStream oos;
    -ObjectInputStream ois;
    +CommunicationSet(Socket socket)
    +Socket getSocket()
    +ObjectOutputStream getOos()
    +ObjectInputStream getOis()
}

+class DecisionUnit{
    -int winnerNumber;
    -int ranking
    -int highCard
    -boolean drawFlag;
    -boolean drawList[]
    -HandRankingType[] judgeResult
    +DecisionUnit(PlayerType[] playerList)
    +boolean[] getWinner()
    +HandRankingType[] getJudgeResult()
}

+class RequestType{
    -boolean[] changeNumber
    +RequestType(boolean[] requestNumber)
    +int[] getReplacementNumber()
}

+class HandRankingType{
    -int handRanking
    -int highCard
    +HandRankingType(HandType hand)
    +int getHandRanking()
    +int getHighCard()
    +String pokerRankingString()
}

+class GameStartForm{
    +PokerClient pokerClient
    +GameStartForm()
    +Static void main(String[] args)
}

+class DecideAddPlayerForm{
    +DecideAddPlayerForm(PokerClient pokerClient)
    -void nextPage(PokerClient pokerClient,boolean flag)
}

+class ShowPlayerHandForm{
    -boolean[] flag
    +ShowPlayerHandForm(PokerClient pokerClient)
    -void changeFlag(int ButtonNumber)
    -void changeCard(handType hand)
}

+class ShowResultForm{
    +ShowResultForm(PokerClient pokerClient, PlayerType[] playerList)
    -void createHandPanel()
}

GameStartForm "1" o-down-> "1" PokerClient : create
GameStartForm .down.> DecideAddPlayerForm : create
PokerClient "1" o-down-> "1" PlayerType : create
PokerClient "1" o-down-> "1" CommunicationSet : create
PokerServer "1" o-down-> "*" PlayerType : create
PokerServer "1" o-down-> "1" DeckType : create
PokerServer "1" o-down-> "1" CommunicationSet : create
DecideAddPlayerForm .down.> ShowPlayerHandForm : create
PlayerType "1" o-down-> "1" HandType : create
ShowPlayerHandForm .down.> ShowResultForm : create
ShowPlayerHandForm .down.> RequestType : create
HandType "1" o-down-> "*" CardType : create
DeckType "1" o-down-> "*" CardType : create
ShowResultForm .down.> DecisionUnit : create
DecisionUnit "1" o-right-> "*" HandRankingType : create

@enduml